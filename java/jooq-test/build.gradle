buildscript {
    ext.kotlin_version = '1.2.31'
    ext.jooq_version = '3.10.6'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jooq:jooq-codegen:$jooq_version"
        classpath 'org.postgresql:postgresql:9.4.1212'
    }
}

group 'com.jiangklijna'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'kotlin'

sourceCompatibility = 1.8

jar {
    manifest {
        attributes 'Main-Class': 'com.jiangklijna.AppKt'
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

repositories {
//	mavenCentral()
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile 'org.postgresql:postgresql:9.4.1212'
    compile 'com.zaxxer:HikariCP:2.7.8'
    compile "org.jooq:jooq:$jooq_version"
    compile "org.jooq:jooq-meta:$jooq_version"
    compile "org.jooq:jooq-codegen:$jooq_version"
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

task generate {
    doLast {
        delete "src/gen"
        def writer = new StringWriter()
        def xml = new groovy.xml.MarkupBuilder(writer)
                .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.10.0.xsd') {
            encoding("UTF-8")
            jdbc() {
                driver('org.postgresql.Driver')
                url('jdbc:postgresql://192.168.200.65:5432/test')
                user('postgres')
                password('jiangKlijna')
            }
            generator() {
                database() {
                    name('org.jooq.util.postgres.PostgresDatabase')
                    inputSchema('public')
                    includes('.*')
                    excludes()
                }
                generate() {
                    pojos true
                    daos true
                }
                target() {
                    packageName('com.jiangklijna.db')
                    directory('src/gen/java')
                }
            }
        }
//        println writer.toString()
        org.jooq.util.GenerationTool.generate(
                javax.xml.bind.JAXB.unmarshal(new StringReader(writer.toString()), org.jooq.util.jaxb.Configuration.class)
        )

    }
}

sourceSets {
    main {
        java {
            srcDirs "src/main/kotlin", "src/gen/java"
        }
    }
}